# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/wicked_pdf/all/wicked_pdf.rbi
#
# wicked_pdf-2.1.0

class WickedPdf
  def binary_version; end
  def binary_version=(arg0); end
  def config; end
  def config=(obj); end
  def find_wkhtmltopdf_binary_path; end
  def find_xvfb_run_binary_path; end
  def in_development_mode?; end
  def initialize(wkhtmltopdf_binary_path = nil); end
  def make_option(name, value, type = nil); end
  def make_options(options, names, prefix = nil, type = nil); end
  def on_windows?; end
  def parse_basic_auth(options); end
  def parse_cover(argument); end
  def parse_extra(options); end
  def parse_global(options); end
  def parse_header_footer(options); end
  def parse_margins(options); end
  def parse_options(options); end
  def parse_others(options); end
  def parse_outline(options); end
  def parse_toc(options); end
  def parse_version(version_info); end
  def pdf_from_html_file(filepath, options = nil); end
  def pdf_from_string(string, options = nil); end
  def pdf_from_url(url, options = nil); end
  def possible_binary_locations; end
  def print_command(cmd); end
  def retrieve_binary_version; end
  def self.config; end
  def self.config=(obj); end
  def valid_option(name); end
  include WickedPdf::Progress
end
module WickedPdf::PdfHelper
  def clean_temp_files; end
  def make_and_send_pdf(pdf_name, options = nil); end
  def make_pdf(options = nil); end
  def prerender_header_and_footer(options); end
  def render(options = nil, *args, &block); end
  def render_to_string(options = nil, *args, &block); end
  def render_to_string_with_wicked_pdf(options = nil, *args, &block); end
  def render_with_wicked_pdf(options = nil, *args, &block); end
  def self.included(base); end
  def self.prepended(base); end
  def set_basic_auth(options = nil); end
end
module WickedPdf::WickedPdfHelper
  def self.add_extension(filename, extension); end
  def self.root_path; end
  def wicked_pdf_image_tag(img, options = nil); end
  def wicked_pdf_javascript_include_tag(*sources); end
  def wicked_pdf_javascript_src_tag(jsfile, options = nil); end
  def wicked_pdf_stylesheet_link_tag(*sources); end
end
module WickedPdf::WickedPdfHelper::Assets
  def asset_pathname(source); end
  def find_asset(path); end
  def gzip(asset); end
  def precompiled_or_absolute_asset?(source); end
  def prepend_protocol(source); end
  def read_asset(source); end
  def read_from_uri(uri); end
  def running_in_development?; end
  def webpacker_source_url(source); end
  def wicked_pdf_asset_base64(path); end
  def wicked_pdf_asset_pack_path(asset); end
  def wicked_pdf_asset_path(asset); end
  def wicked_pdf_image_tag(img, options = nil); end
  def wicked_pdf_javascript_include_tag(*sources); end
  def wicked_pdf_javascript_pack_tag(*sources); end
  def wicked_pdf_javascript_src_tag(jsfile, options = nil); end
  def wicked_pdf_stylesheet_link_tag(*sources); end
  def wicked_pdf_stylesheet_pack_tag(*sources); end
end
class WickedPdf::WickedPdfTempfile < Tempfile
  def initialize(filename, temp_dir = nil); end
end
class WickedPdf::Middleware
  def call(env); end
  def concat(accepts, type); end
  def initialize(app, options = nil, conditions = nil); end
  def render_as_pdf?; end
  def rendering_pdf?; end
  def set_request_to_render_as_pdf(env); end
  def translate_paths(body, env); end
end
module WickedPdf::Progress
  def invoke_with_progress(command, options); end
  def track_progress?(options); end
end
