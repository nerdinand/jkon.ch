# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `wicked_pdf` gem.
# Please instead update this file by running `bin/tapioca gem wicked_pdf`.

# source://wicked_pdf//lib/wicked_pdf/version.rb#1
class WickedPdf
  include ::WickedPdf::Progress

  # @return [WickedPdf] a new instance of WickedPdf
  #
  # source://wicked_pdf//lib/wicked_pdf.rb#27
  def initialize(wkhtmltopdf_binary_path = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf.rb#31
  def binary_version; end

  # source://wicked_pdf//lib/wicked_pdf.rb#23
  def config; end

  # source://wicked_pdf//lib/wicked_pdf.rb#23
  def config=(val); end

  # source://wicked_pdf//lib/wicked_pdf.rb#35
  def pdf_from_html_file(filepath, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf.rb#39
  def pdf_from_string(string, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf.rb#49
  def pdf_from_url(url, options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf.rb#87
  def in_development_mode?; end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf.rb#93
  def on_windows?; end

  # source://wicked_pdf//lib/wicked_pdf.rb#101
  def parse_options(options); end

  # source://wicked_pdf//lib/wicked_pdf.rb#97
  def print_command(cmd); end

  class << self
    # source://wicked_pdf//lib/wicked_pdf.rb#23
    def config; end

    # source://wicked_pdf//lib/wicked_pdf.rb#23
    def config=(val); end
  end
end

# source://wicked_pdf//lib/wicked_pdf/binary.rb#2
class WickedPdf::Binary
  # @return [Binary] a new instance of Binary
  #
  # source://wicked_pdf//lib/wicked_pdf/binary.rb#7
  def initialize(binary_path, default_version = T.unsafe(nil)); end

  # Returns the value of attribute default_version.
  #
  # source://wicked_pdf//lib/wicked_pdf/binary.rb#5
  def default_version; end

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#20
  def parse_version_string(version_info); end

  # Returns the value of attribute path.
  #
  # source://wicked_pdf//lib/wicked_pdf/binary.rb#5
  def path; end

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#16
  def version; end

  # @raise [StandardError]
  #
  # source://wicked_pdf//lib/wicked_pdf/binary.rb#29
  def xvfb_run_path; end

  private

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#45
  def find_binary_path; end

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#59
  def possible_binary_locations; end

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#52
  def possible_which_path; end

  # source://wicked_pdf//lib/wicked_pdf/binary.rb#38
  def retrieve_binary_version; end
end

# source://wicked_pdf//lib/wicked_pdf/binary.rb#3
WickedPdf::Binary::EXE_NAME = T.let(T.unsafe(nil), String)

# source://wicked_pdf//lib/wicked_pdf.rb#21
WickedPdf::DEFAULT_BINARY_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://wicked_pdf//lib/wicked_pdf/middleware.rb#2
class WickedPdf::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#3
  def initialize(app, options = T.unsafe(nil), conditions = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#9
  def call(env); end

  private

  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#88
  def concat(accepts, type); end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#53
  def render_as_pdf?; end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#49
  def rendering_pdf?; end

  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#81
  def set_request_to_render_as_pdf(env); end

  # Change relative paths to absolute
  #
  # source://wicked_pdf//lib/wicked_pdf/middleware.rb#42
  def translate_paths(body, env); end
end

# source://wicked_pdf//lib/wicked_pdf/option_parser.rb#2
class WickedPdf::OptionParser
  # @return [OptionParser] a new instance of OptionParser
  #
  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#7
  def initialize(binary_version = T.unsafe(nil)); end

  # Returns the value of attribute binary_version.
  #
  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#5
  def binary_version; end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#11
  def parse(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#26
  def valid_option(name); end

  private

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#212
  def make_option(name, value, type = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#198
  def make_options(options, names, prefix = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#43
  def parse_basic_auth(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#78
  def parse_cover(argument); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#36
  def parse_extra(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#141
  def parse_global(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#52
  def parse_header_footer(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#137
  def parse_margins(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#162
  def parse_others(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#128
  def parse_outline(options); end

  # source://wicked_pdf//lib/wicked_pdf/option_parser.rb#94
  def parse_toc(options); end
end

# source://wicked_pdf//lib/wicked_pdf/option_parser.rb#3
WickedPdf::OptionParser::BINARY_VERSION_WITHOUT_DASHES = T.let(T.unsafe(nil), Gem::Version)

# source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#2
module WickedPdf::PdfHelper
  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#13
  def render(*args); end

  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#22
  def render_to_string(*args); end

  # @raise [ArgumentError]
  #
  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#38
  def render_to_string_with_wicked_pdf(options); end

  # @raise [ArgumentError]
  #
  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#31
  def render_with_wicked_pdf(options); end

  private

  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#55
  def clean_temp_files; end

  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#78
  def make_and_send_pdf(pdf_name, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#61
  def make_pdf(options = T.unsafe(nil)); end

  # Given an options hash, prerenders content for the header and footer sections
  # to temp files and return a new options hash including the URLs to these files.
  #
  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#105
  def prerender_header_and_footer(options); end

  # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#48
  def set_basic_auth(options = T.unsafe(nil)); end

  class << self
    # source://wicked_pdf//lib/wicked_pdf/pdf_helper.rb#3
    def prepended(base); end
  end
end

# source://wicked_pdf//lib/wicked_pdf/progress.rb#2
module WickedPdf::Progress
  # source://wicked_pdf//lib/wicked_pdf/progress.rb#10
  def invoke_with_progress(command, options); end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf/progress.rb#6
  def track_progress?(options); end
end

# source://wicked_pdf//lib/wicked_pdf/tempfile.rb#4
class WickedPdf::Tempfile < ::Tempfile
  # @return [Tempfile] a new instance of Tempfile
  #
  # source://wicked_pdf//lib/wicked_pdf/tempfile.rb#5
  def initialize(filename, temp_dir = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/tempfile.rb#22
  def read_in_chunks; end

  # source://wicked_pdf//lib/wicked_pdf/tempfile.rb#12
  def write_in_chunks(input_string); end

  private

  # source://wicked_pdf//lib/wicked_pdf/tempfile.rb#34
  def chunk_size; end

  # source://wicked_pdf//lib/wicked_pdf/tempfile.rb#38
  def file_too_large_message; end
end

# source://wicked_pdf//lib/wicked_pdf/version.rb#2
WickedPdf::VERSION = T.let(T.unsafe(nil), String)

# source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#2
module WickedPdf::WickedPdfHelper
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#20
  def wicked_pdf_image_tag(img, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#31
  def wicked_pdf_javascript_include_tag(*sources); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#24
  def wicked_pdf_javascript_src_tag(jsfile, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#11
  def wicked_pdf_stylesheet_link_tag(*sources); end

  class << self
    # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#7
    def add_extension(filename, extension); end

    # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper.rb#3
    def root_path; end
  end
end

# source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#6
module WickedPdf::WickedPdfHelper::Assets
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#23
  def wicked_pdf_asset_base64(path); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#111
  def wicked_pdf_asset_pack_path(asset); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#103
  def wicked_pdf_asset_path(asset); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#87
  def wicked_pdf_image_tag(img, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#96
  def wicked_pdf_javascript_include_tag(*sources); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#74
  def wicked_pdf_javascript_pack_tag(*sources); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#91
  def wicked_pdf_javascript_src_tag(jsfile, options = T.unsafe(nil)); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#45
  def wicked_pdf_stylesheet_link_tag(*sources); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#60
  def wicked_pdf_stylesheet_pack_tag(*sources); end

  # Using `image_tag` with URLs when generating PDFs (specifically large PDFs with lots of pages) can cause buffer/stack overflows.
  #
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#33
  def wicked_pdf_url_base64(url); end

  private

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#126
  def asset_pathname(source); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#147
  def find_asset(path); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#196
  def gzip(asset); end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#169
  def precompiled_or_absolute_asset?(source); end

  # will prepend a http or default_protocol to a protocol relative URL
  # or when no protcol is set.
  #
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#159
  def prepend_protocol(source); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#176
  def read_asset(source); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#189
  def read_from_uri(uri); end

  # @return [Boolean]
  #
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#221
  def running_in_development?; end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#204
  def webpacker_source_url(source); end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#232
  def webpacker_version; end
end

# source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#7
WickedPdf::WickedPdfHelper::Assets::ASSET_URL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#9
class WickedPdf::WickedPdfHelper::Assets::PropshaftAsset < ::SimpleDelegator
  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#10
  def content_type; end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#18
  def filename; end

  # source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#14
  def to_s; end
end

# borrowed from actionpack/lib/action_view/helpers/asset_url_helper.rb
#
# source://wicked_pdf//lib/wicked_pdf/wicked_pdf_helper/assets.rb#124
WickedPdf::WickedPdfHelper::Assets::URI_REGEXP = T.let(T.unsafe(nil), Regexp)
